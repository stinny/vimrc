extends c

## Default file
snippet gcj
	#include <vector>
	#include <iostream>
	#include <unordered_map>
	#include <map>
	#include <iomanip>
	#include <functional>
	#include <algorithm>
	#include <cassert>
	#include <cmath>
	#include <string>
	#include <sstream>
	using namespace std;
	
	#ifndef MDEBUG
	#define NDEBUG
	#endif

	#define x first
	#define y second
	#define ll long long
	#define d double
	#define ld long double
	#define pii pair<int,int>
	#define pil pair<int,ll>
	#define pli pair<ll,int>
	#define pll pair<ll,ll>
	#define pss pair<string,string>
	#define psi pair<string,int>
	#define pis pair<int,string>
	#define psl pair<string,ll>
	#define pls pair<ll,string>
	#define wh(x) (x).begin(),(x).end()
	#define ri(x) int x;cin>>x;
	#define rii(x,y) int x,y;cin>>x>>y;
	#define rl(x) ll x;cin>>x;
	#define rv(v) for(auto&_cinv:v) cin>>_cinv;
	#define wv(v) for(auto&_coutv:v) cout << _coutv << ' '; cout << endl;
	#define ev(v) for(auto&_cerrv:v) cerr << _cerrv << ' '; cerr << endl;
	#define MOD 1000000007
	
	namespace std { 
	template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}};
	}
	// auto fraclt = [](auto&a,auto&b) { return (ll)a.x * b.y < (ll)b.x * a.y; };
	template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
	template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
	template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }
	template<typename T> void fracn(pair<T,T>&a) {auto g=gcd(a.x,a.y);a.x/=g;a.y/=g;}
	template<typename T> struct Index { int operator[](const T&t){auto i=m.find(t);return i!=m.end()?i->y:m[t]=m.size();}int s(){return m.size();} unordered_map<T,int> m; };
	
	int main(int,char**) {
		ios_base::sync_with_stdio(false);

		ri(T)
		for (int t=1;t<=T;++t) {
			cout << "Case #" << t << ": ";
			${1}
		}
	}

## Algs
snippet flow
	#define V vector
	template<class T>struct Edge{int u,v;T c,f;size_t i;};
	template<class T>struct PushRelabel{int n;V<V<Edge<T>>>d;V<T>x;V<int>l,c;V<bool>a;V<V<int>>B;int b;PushRelabel(int n):n(n),d(n){}void AddEdge(int u,int v,T c=1)
	{d[u].push_back({u,v,c,0,d[v].size()});if(u==v)d[u].back().i++;d[v].push_back({v,u,0,0,d[u].size()-1});}void q(int v){if(!a[v]&&x[v]>0&&l[v]<n){a[v]=true;
	B[l[v]].push_back(v);b=max(b,l[v]);}}void z(Edge<T>&e){T m=min(x[e.u],e.c-e.f);if(l[e.u]==l[e.v]+1&&m>T(0)){e.f+=m;d[e.v][e.i].f-=m;x[e.v]+=m;x[e.u]-=m;
	q(e.v);}}inline void s(int v, int n) {--c[l[v]];l[v] = n;++c[l[v]];q(v);}void g(int k){for(int v=0;v<n;v++)if(l[v]>=k)s(v,max(l[v],n));}void r(int v){int nl=n;
	for(auto&e:d[v]){if(e.c-e.f>0)nl=min(nl,l[e.v]+1);}s(v,nl);}void h(int v){for(auto&e:d[v]){z(e);if(x[v]<=0)return;}if(c[l[v]]==1)g(l[v]);else r(v);}T GetMaxFlow
	(int s, int t){l=V<int>(n,0),x=V<T>(n,0),c=V<int>(n+1,0),a=V<bool>(n,false),B=V<V<int>>(n),b=0;for(auto&e:d[s])x[s]+=e.c;c[0]=n;q(s);a[t]=true;while(b>=0){if(!B[b]
	.empty()){int v=B[b].back();B[b].pop_back();a[v]=false;h(v);}else b--;}return x[t];}};
	#undef V

## Two-dimensional vector
snippet vec2
	vector<vector<${1:int}>> ${2}(${3},vector<$1>(${4},${5:0}));


## Modular arithmetic
snippet madd
	{$1} = (${1} + ${2}) % ${3:MOD}
snippet msub
	{$1} = (${1} + ${2}) % ${3:MOD}
snippet mmul
	{$1} = ((ll)${1} * (ll)${2}) % ${3:MOD}

## In-place extremes
snippet mmin
	${1} = min(${1},${2})
snippet mmax
	${1} = max(${1},${2})

## Algorithm
snippet all
	all_of(${1:A}.begin(),$1.end(),[&](decltype(*begin($1)) it){ return ${2:it}; });
snippet any
	any_of(${1:A}.begin(),$1.end(),[&](decltype(*begin($1)) it){ return ${2:it}; });
snippet none
	none_of(${1:A}.begin(),$1.end(),[&](decltype(*begin($1)) it){ return ${2:it}; });
##
## Preprocessor
# #include <...>
snippet inc
	#include <${1:iostream}>
snippet binc
	#include <boost/${1:shared_ptr}.hpp>
##
## STL Collections
# std::array
snippet array
	array<${1:T}, ${2:N}> ${3};
# std::vector
snippet vector
	vector<${1:T}> ${2};
# std::deque
snippet deque
	deque<${1:T}> ${2};
# std::forward_list
snippet flist
	forward_list<${1:T}> ${2};
# std::list
snippet list
	list<${1:T}> ${2};
# std::set
snippet set
	set<${1:T}> ${2};
# std::map
snippet map
	map<${1:Key}, ${2:T}> ${3};
# std::multiset
snippet mset
	multiset<${1:T}> ${2};
# std::multimap
snippet mmap
	multimap<${1:Key}, ${2:T}> ${3};
# std::unordered_set
snippet uset
	unordered_set<${1:T}> ${2};
# std::unordered_map
snippet umap
	unordered_map<${1:Key}, ${2:T}> ${3};
# std::unordered_multiset
snippet umset
	unordered_multiset<${1:T}> ${2};
# std::unordered_multimap
snippet ummap
	unordered_multimap<${1:Key}, ${2:T}> ${3};
# std::stack
snippet stack
	stack<${1:T}> ${2};
# std::queue
snippet queue
	queue<${1:T}> ${2};
# std::priority_queue
snippet pqueue
	priority_queue<${1:T}> ${2};
##
## Access Modifiers
# private
snippet pri
	private
# protected
snippet pro
	protected
# public
snippet pub
	public
# friend
snippet fr
	friend
# mutable
snippet mu
	mutable
##
## Class
# class
snippet cl
	class ${1:`vim_snippets#Filename('$1', 'name')`}
	{
	public:
		$1(${2});
		~$1();

	private:
		${0:/* data */}
	};
# member function implementation
snippet mfun
	${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
		${0}
	}
# namespace
snippet ns
	namespace ${1:`vim_snippets#Filename('', 'my')`} {
		${0}
	} /* namespace $1 */
##
## Input/Output
# std::cout
snippet cout
	std::cout << ${1} << std::endl;
# std::cin
snippet cin
	std::cin >> ${1};
##
## Casts
# static
snippet sca
	static_cast<${1:unsigned}>(${2:expr})${3}
# dynamic
snippet dca
	dynamic_cast<${1:unsigned}>(${2:expr})${3}
# reinterpret
snippet rca
	reinterpret_cast<${1:unsigned}>(${2:expr})${3}
# const
snippet cca
	const_cast<${1:unsigned}>(${2:expr})${3}
## Iteration
# for i
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}

# foreach
snippet fore
	for (auto & ${1:i} : ${2:container}) {
		${3}
	}
# iterator
snippet iter
	for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
		${3}
	}

# auto iterator
snippet itera
	for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
		${3:std::cout << *$1 << std::endl;}
	}
##
## Lambdas
# lambda (one line)
snippet ld
	[${1}](${2}){${3}};
# lambda (multi-line)
snippet lld
	[&](${1}){
		${2}
	}
